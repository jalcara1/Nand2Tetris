/** The Tower of Hanoi */
class Hanoi {

    // Private variables
    field int discos;
    field int numDiscosTorre1;
    field int numDiscosTorre2;
    field int numDiscosTorre3;
    field int numTamTorre1;
    field int numTamTorre2;
    field int numTamTorre3;
    field int numXTorre1;
    field int numXTorre2;
    field int numXTorre3;

    // class-level variable
    static int posDiscox10 = 50;
    static int posDiscoy1  = 200;
    static int posDiscox9  = 55;
    static int posDiscoy2  = 185;
    static int posDiscox8  = 60;
    static int posDiscoy3  = 170;
    static int posDiscox7  = 65;
    static int posDiscoy4  = 155;
    static int posDiscox6  = 70;
    static int posDiscoy5  = 140;
    static int posDiscox5  = 75;
    static int posDiscoy6  = 125;
    static int posDiscox4  = 80;
    static int posDiscoy7  = 110;
    static int posDiscox3  = 85;
    static int posDiscoy8  = 95;
    static int posDiscox2  = 90;
    static int posDiscoy9  = 80;
    static int posDiscox1  = 95;
    static int posDiscoy10 = 65;
    static int tamDisco10  = 120;
    static int tamDisco9   = 110;
    static int tamDisco8   = 100;
    static int tamDisco7   = 90;
    static int tamDisco6   = 80;
    static int tamDisco5   = 70;
    static int tamDisco4   = 60;
    static int tamDisco3   = 50;
    static int tamDisco2   = 40;
    static int tamDisco1   = 30;
    static int tamAncho    = 10;
    
    constructor Hanoi new() {
	let discos = numDiscos;
	let numDiscosTorre1 = numDiscos;
	let numDiscosTorre2 = 0;
	let numDiscosTorre3 = 0;
	do repaint();
    }
    function void empezar() {
	let numTamTorre1 = inicioTD(discos);
	let numXTorre1 = inicioX(discos, 0);
	let numTamTorre2 = 0;
	let numTamTorre3 = 0;
	let numXTorre2 = 0;
	let numXTorre3 = 0;
	Sys.wait(1000);//FALTA	
	do repaint();
	do resolver(discos, 0, 1, 2, inicioTD(discos));
    }
    function void resolver(int n, int inicio, int auxiliar, int fin, int tamDisco) {
	var int temporal;
	if (n = 1) {
	    if (inicio = 0) {
		let numDiscosTorre1 = numDiscosTorre1 - 1;
		if(numDiscosTorre1 = 0) {
		    let numTamTorre1 = 0;
		    let numXTorre1 = 0;
		}	
	    } else if (inicio = 1) {
		let numDiscosTorre2 = numDiscosTorre2 - 1;
		if(numDiscosTorre2 = 0) {
		    let numTamTorre2 = 0;
		    let numXTorre2 = 0;
		}	
	    } else if (inicio = 2) {
		let numDiscosTorre3 = numDiscosTorre3 - 1;
		if(numDiscosTorre3 = 0) {
		    let numTamTorre3 = 0;
		    let numXTorre3 = 0;
		}	
	    }
	    if (fin = 0) {
		let numDiscosTorre1 = numDiscosTorre1 + 1;
		if(numTamTorre1 = 0) {
		    let numTamTorre1 = tamDisco;
		    let temporal = numDiscosTorre1;
		    if (auxiliar = 1) {
			let temporal = temporal + numDiscosTorre2;
		    } else {
			let temporal = temporal + numDiscosTorre3;
		    }
		    let numXTorre1 = do inicioX(temporal, 0);
		}
	    } else if (fin = 1) {
		let numDiscosTorre2 = numDiscosTorre2 + 1; 
		if(numTamTorre2 = 0) {
		    let numTamTorre2 = tamDisco;
		    let temporal = numDiscosTorre2;
		    if (auxiliar = 0) {
			let temporal = temporal + numDiscosTorre1;
		    } else {
			let temporal = temporal + numDiscosTorre3;
		    }
		    let numXTorre2 = do inicioX(temporal, 1);
		}
	    } else if (fin = 2) {
		let numDiscosTorre3 = numDiscosTorre3 + 1;
		if(numTamTorre3 = 0) {
		    let numTamTorre3 = tamDisco;
		    let temporal = numDiscosTorre3;
		    if (auxiliar = 0) {
			let temporal = temporal + numDiscosTorre1;
		    } else {
			let temporal = temporal + numDiscosTorre2;
		    }
		    let numXTorre3 = do inicioX(temporal, 2);
		}
	    }
	    do Output.printString(inicio + " -> " + fin); //
	    Sys.wait(100); //FALTA
	    do repaint();
	} else {
	    do resolver(n - 1, inicio, fin, auxiliar, tamDisco - 10);
	    if (inicio = 0) {
		let numDiscosTorre1 =  numDiscosTorre1 - 1;
		if(numDiscosTorre1 = 0) {
		    let numTamTorre1 = 0;
		    let numXTorre1 = 0;
		}	
	    } else if (inicio = 1) {
		let numDiscosTorre2 = numDiscosTorre2 - 1; //
		if(numDiscosTorre2 = 0) {
		    let numTamTorre2 = 0;
		    let numXTorre2 = 0;
		}	
	    } else if (inicio = 2) {
		let numDiscosTorre3 = numDiscosTorre3 - 1; //
		if(numDiscosTorre3 = 0) {
		    let numTamTorre3 = 0;
		    let numXTorre3 = 0;
		}	
	    }
	    if (fin = 0) {
		numDiscosTorre1++; //
		if(numTamTorre1 = 0) {
		    let numTamTorre1 = tamDisco;
		    let temporal = numDiscosTorre1;
		    if (auxiliar = 1) {
			let temporal += numDiscosTorre2;
		    } else {
			let temporal += numDiscosTorre3;
		    }
		    let numXTorre1 = inicioX(temporal, 0);
		}
	    } else if (fin = 1) {
		let numDiscosTorre2 = numDiscosTorre2 + 1; //
		if(numTamTorre2 = 0) {
		    let numTamTorre2 = tamDisco;
		    let temporal = numDiscosTorre2;
		    if (auxiliar = 0) {
			let temporal += numDiscosTorre1;
		    } else {
			let temporal += numDiscosTorre3;
		    }
		    let numXTorre2 = do inicioX(temporal, 1);
		}
	    } else if (fin = 2) {
		let numDiscosTorre3 = numDiscosTorre3 + 1; //
		if(numTamTorre3 = 0) {
		    let numTamTorre3 = tamDisco;
		    let temporal = numDiscosTorre3;
		    if (auxiliar = 0){
			let temporal = temporal + numDiscosTorre1;
		    } else {
			let temporal = temporal + numDiscosTorre2;
		    }
		    let numXTorre3 = do inicioX(temporal, 2);
		}
	    }
	    Sys.wait(1000); //FALTA
	    do repaint();
	    do Output.printString(inicio + " -> " + fin); //
	    do resolver(n - 1, auxiliar, inicio, fin, tamDisco);
	}
    }
    function void dibujarTorres(Graphics2D g) { //FALTA
	g.setColor(Color.blue);
	Rectangle2D.Double torre1 = new Rectangle2D.Double(105,10,10,210);
	Rectangle2D.Double torre2 = new Rectangle2D.Double(251,10,10,210);
	Rectangle2D.Double torre3 = new Rectangle2D.Double(397,10,10,210);
	g.fill(torre1);
	g.fill(torre2);
	g.fill(torre3);
	g.draw(torre1);
	g.draw(torre2);
	g.draw(torre3);
    } //
    function int totalDiscos(int numTorre) {
	if(numTorre = 0){
	    return numDiscosTorre1;
	} else if(numTorre = 1) {
	    return numDiscosTorre2;
	}
	return numDiscosTorre3; 
    }
    function int inicioX(int numDiscos, int numTorre) {
	if(numDiscos = 1) {
	    return posDiscox1 + (146 * numTorre);
	}if(numDiscos = 2) {
	    return posDiscox2 + (146 * numTorre);
	}if(numDiscos = 3){ 
	    return posDiscox3 + (146 * numTorre);
	}if(numDiscos = 4){ 
	    return posDiscox4 + (146 * numTorre);
	}if(numDiscos = 5) {
	    return posDiscox5 + (146 * numTorre);
	}if(numDiscos = 6) { 
	    return posDiscox6 + (146 * numTorre);
	}if(numDiscos = 7) {
	    return posDiscox7 + (146 * numTorre);
	}if(numDiscos = 8) {
	    return posDiscox8 + (146 * numTorre);
	}if(numDiscos = 9) {
	    return posDiscox9 + (146 * numTorre);
	}if(numDiscos = 10) {
	    return posDiscox10 + (146 * numTorre);
	}
	return 0;
    }
    function int inicioTD(int numDiscos) {
	if(numDiscos = 1) {
	    return tamDisco1;
	}if(numDiscos = 2) {
	    return tamDisco2;
	}if(numDiscos = 3) { 
	    return tamDisco3;
	}if(numDiscos = 4) {
	    return tamDisco4;
	}if(numDiscos = 5){ 
	    return tamDisco5;
	}if(numDiscos = 6){ 
	    return tamDisco6;
	}if(numDiscos = 7){ 
	    return tamDisco7;
	}if(numDiscos = 8){ 
	    return tamDisco8;
	}if(numDiscos = 9){ 
	    return tamDisco9;
	}if(numDiscos = 10){ 
	    return tamDisco10;
	}
	return 0;
    }
    //FALTA
    function void dibujaDiscos(Graphics2D g, int numTorre, int numDiscos, int numPosXini, int numPosYini, int numTamDisco) {
	g.setColor(Color.blue);
	Rectangle2D.Double disco;
	int numTotalDiscos = numDiscos;
	int numTD = numTamDisco;
	do {
	    disco = new Rectangle2D.Double(numPosXini,numPosYini,numTD,tamAncho);
	    g.fill(disco);
	    g.draw(disco);
	    let numPosXini = numPosXini + 5;
	    let numPosYini = numPosYini - 15;
	    let numTD = numTD - 10;
	    let numTotalDiscos = numTotalDiscos - 1;
	} while (numTotalDiscos > 0);
    }
    //FALTA
    function void paintComponent(Graphics g) {
	super.paintComponent(g);
	dibujaTorres((Graphics2D) g);
	vat int numTotalDiscos;
	let numTotalDiscos = do totalDiscos(0);
	dibujaDiscos((Graphics2D) g, 0, numTotalDiscos, numXTorre1, posDiscoy1, numTamTorre1);
	let numTotalDiscos = do totalDiscos(1);
	dibujaDiscos((Graphics2D) g, 1, numTotalDiscos, numXTorre2, posDiscoy1, numTamTorre2);
	let numTotalDiscos = do totalDiscos(2);
	dibujaDiscos((Graphics2D) g, 2, numTotalDiscos, numXTorre3, posDiscoy1, numTamTorre3);
    }//
}
